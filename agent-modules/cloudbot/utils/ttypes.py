#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class NCInstParams:
  """
  Attributes:
   - memorySize
   - diskSize
   - numberOfCores
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'memorySize', None, None, ), # 1
    (2, TType.I64, 'diskSize', None, None, ), # 2
    (3, TType.I64, 'numberOfCores', None, None, ), # 3
  )

  def __init__(self, memorySize=None, diskSize=None, numberOfCores=None,):
    self.memorySize = memorySize
    self.diskSize = diskSize
    self.numberOfCores = numberOfCores

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.memorySize = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.diskSize = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.numberOfCores = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NCInstParams')
    if self.memorySize is not None:
      oprot.writeFieldBegin('memorySize', TType.I64, 1)
      oprot.writeI64(self.memorySize)
      oprot.writeFieldEnd()
    if self.diskSize is not None:
      oprot.writeFieldBegin('diskSize', TType.I64, 2)
      oprot.writeI64(self.diskSize)
      oprot.writeFieldEnd()
    if self.numberOfCores is not None:
      oprot.writeFieldBegin('numberOfCores', TType.I64, 3)
      oprot.writeI64(self.numberOfCores)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NCSpiceInfo:
  """
  Attributes:
   - hostIp
   - port
   - passwd
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hostIp', None, None, ), # 1
    (2, TType.I64, 'port', None, None, ), # 2
    (3, TType.STRING, 'passwd', None, None, ), # 3
  )

  def __init__(self, hostIp=None, port=None, passwd=None,):
    self.hostIp = hostIp
    self.port = port
    self.passwd = passwd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hostIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.port = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.passwd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NCSpiceInfo')
    if self.hostIp is not None:
      oprot.writeFieldBegin('hostIp', TType.STRING, 1)
      oprot.writeString(self.hostIp)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I64, 2)
      oprot.writeI64(self.port)
      oprot.writeFieldEnd()
    if self.passwd is not None:
      oprot.writeFieldBegin('passwd', TType.STRING, 3)
      oprot.writeString(self.passwd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NCVolume:
  """
  Attributes:
   - volumeId
   - remoteDev
   - localDev
   - stateName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'volumeId', None, None, ), # 1
    (2, TType.STRING, 'remoteDev', None, None, ), # 2
    (3, TType.STRING, 'localDev', None, None, ), # 3
    (4, TType.STRING, 'stateName', None, None, ), # 4
  )

  def __init__(self, volumeId=None, remoteDev=None, localDev=None, stateName=None,):
    self.volumeId = volumeId
    self.remoteDev = remoteDev
    self.localDev = localDev
    self.stateName = stateName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.volumeId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.remoteDev = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.localDev = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.stateName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NCVolume')
    if self.volumeId is not None:
      oprot.writeFieldBegin('volumeId', TType.STRING, 1)
      oprot.writeString(self.volumeId)
      oprot.writeFieldEnd()
    if self.remoteDev is not None:
      oprot.writeFieldBegin('remoteDev', TType.STRING, 2)
      oprot.writeString(self.remoteDev)
      oprot.writeFieldEnd()
    if self.localDev is not None:
      oprot.writeFieldBegin('localDev', TType.STRING, 3)
      oprot.writeString(self.localDev)
      oprot.writeFieldEnd()
    if self.stateName is not None:
      oprot.writeFieldBegin('stateName', TType.STRING, 4)
      oprot.writeString(self.stateName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NCNetConf:
  """
  Attributes:
   - vlan
   - publicMac
   - privateMac
   - publicIp
   - privateIp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vlan', None, None, ), # 1
    (2, TType.STRING, 'publicMac', None, None, ), # 2
    (3, TType.STRING, 'privateMac', None, None, ), # 3
    (4, TType.STRING, 'publicIp', None, None, ), # 4
    (5, TType.STRING, 'privateIp', None, None, ), # 5
  )

  def __init__(self, vlan=None, publicMac=None, privateMac=None, publicIp=None, privateIp=None,):
    self.vlan = vlan
    self.publicMac = publicMac
    self.privateMac = privateMac
    self.publicIp = publicIp
    self.privateIp = privateIp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vlan = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.publicMac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.privateMac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.publicIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.privateIp = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NCNetConf')
    if self.vlan is not None:
      oprot.writeFieldBegin('vlan', TType.I64, 1)
      oprot.writeI64(self.vlan)
      oprot.writeFieldEnd()
    if self.publicMac is not None:
      oprot.writeFieldBegin('publicMac', TType.STRING, 2)
      oprot.writeString(self.publicMac)
      oprot.writeFieldEnd()
    if self.privateMac is not None:
      oprot.writeFieldBegin('privateMac', TType.STRING, 3)
      oprot.writeString(self.privateMac)
      oprot.writeFieldEnd()
    if self.publicIp is not None:
      oprot.writeFieldBegin('publicIp', TType.STRING, 4)
      oprot.writeString(self.publicIp)
      oprot.writeFieldEnd()
    if self.privateIp is not None:
      oprot.writeFieldBegin('privateIp', TType.STRING, 5)
      oprot.writeString(self.privateIp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InstanceInfo:
  """
  Attributes:
   - instanceId
   - imageId
   - imageURL
   - kernelId
   - kernelURL
   - ramdiskId
   - ramdiskURL
   - reservationId
   - userId
   - retries
   - stateName
   - stateCode
   - state
   - keyName
   - privateDnsName
   - dnsName
   - launchTime
   - terminationTime
   - params
   - ncnet
   - userData
   - launchIndex
   - groupNames
   - groupNamesSize
   - volumes
   - volumesSize
   - ncspiceinfo
   - bundle
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instanceId', None, None, ), # 1
    (2, TType.STRING, 'imageId', None, None, ), # 2
    (3, TType.STRING, 'imageURL', None, None, ), # 3
    (4, TType.STRING, 'kernelId', None, None, ), # 4
    (5, TType.STRING, 'kernelURL', None, None, ), # 5
    (6, TType.STRING, 'ramdiskId', None, None, ), # 6
    (7, TType.STRING, 'ramdiskURL', None, None, ), # 7
    (8, TType.STRING, 'reservationId', None, None, ), # 8
    (9, TType.STRING, 'userId', None, None, ), # 9
    (10, TType.I64, 'retries', None, None, ), # 10
    (11, TType.STRING, 'stateName', None, None, ), # 11
    (12, TType.I64, 'stateCode', None, None, ), # 12
    (13, TType.I64, 'state', None, None, ), # 13
    (14, TType.STRING, 'keyName', None, None, ), # 14
    (15, TType.STRING, 'privateDnsName', None, None, ), # 15
    (16, TType.STRING, 'dnsName', None, None, ), # 16
    (17, TType.I64, 'launchTime', None, None, ), # 17
    (18, TType.I64, 'terminationTime', None, None, ), # 18
    (19, TType.STRUCT, 'params', (NCInstParams, NCInstParams.thrift_spec), None, ), # 19
    (20, TType.STRUCT, 'ncnet', (NCNetConf, NCNetConf.thrift_spec), None, ), # 20
    (21, TType.STRING, 'userData', None, None, ), # 21
    (22, TType.STRING, 'launchIndex', None, None, ), # 22
    (23, TType.LIST, 'groupNames', (TType.STRING,None), None, ), # 23
    (24, TType.I64, 'groupNamesSize', None, None, ), # 24
    (25, TType.LIST, 'volumes', (TType.STRUCT,(NCVolume, NCVolume.thrift_spec)), None, ), # 25
    (26, TType.I64, 'volumesSize', None, None, ), # 26
    (27, TType.STRUCT, 'ncspiceinfo', (NCSpiceInfo, NCSpiceInfo.thrift_spec), None, ), # 27
    (28, TType.I64, 'bundle', None, None, ), # 28
  )

  def __init__(self, instanceId=None, imageId=None, imageURL=None, kernelId=None, kernelURL=None, ramdiskId=None, ramdiskURL=None, reservationId=None, userId=None, retries=None, stateName=None, stateCode=None, state=None, keyName=None, privateDnsName=None, dnsName=None, launchTime=None, terminationTime=None, params=None, ncnet=None, userData=None, launchIndex=None, groupNames=None, groupNamesSize=None, volumes=None, volumesSize=None, ncspiceinfo=None, bundle=None,):
    self.instanceId = instanceId
    self.imageId = imageId
    self.imageURL = imageURL
    self.kernelId = kernelId
    self.kernelURL = kernelURL
    self.ramdiskId = ramdiskId
    self.ramdiskURL = ramdiskURL
    self.reservationId = reservationId
    self.userId = userId
    self.retries = retries
    self.stateName = stateName
    self.stateCode = stateCode
    self.state = state
    self.keyName = keyName
    self.privateDnsName = privateDnsName
    self.dnsName = dnsName
    self.launchTime = launchTime
    self.terminationTime = terminationTime
    self.params = params
    self.ncnet = ncnet
    self.userData = userData
    self.launchIndex = launchIndex
    self.groupNames = groupNames
    self.groupNamesSize = groupNamesSize
    self.volumes = volumes
    self.volumesSize = volumesSize
    self.ncspiceinfo = ncspiceinfo
    self.bundle = bundle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instanceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.imageId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.imageURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.kernelId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.kernelURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ramdiskId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ramdiskURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.reservationId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.retries = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.stateName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.stateCode = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.state = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.keyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.privateDnsName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.dnsName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.launchTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.terminationTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.params = NCInstParams()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.ncnet = NCNetConf()
          self.ncnet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.userData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.launchIndex = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.groupNames = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.groupNames.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          self.groupNamesSize = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.LIST:
          self.volumes = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = NCVolume()
            _elem11.read(iprot)
            self.volumes.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I64:
          self.volumesSize = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRUCT:
          self.ncspiceinfo = NCSpiceInfo()
          self.ncspiceinfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I64:
          self.bundle = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InstanceInfo')
    if self.instanceId is not None:
      oprot.writeFieldBegin('instanceId', TType.STRING, 1)
      oprot.writeString(self.instanceId)
      oprot.writeFieldEnd()
    if self.imageId is not None:
      oprot.writeFieldBegin('imageId', TType.STRING, 2)
      oprot.writeString(self.imageId)
      oprot.writeFieldEnd()
    if self.imageURL is not None:
      oprot.writeFieldBegin('imageURL', TType.STRING, 3)
      oprot.writeString(self.imageURL)
      oprot.writeFieldEnd()
    if self.kernelId is not None:
      oprot.writeFieldBegin('kernelId', TType.STRING, 4)
      oprot.writeString(self.kernelId)
      oprot.writeFieldEnd()
    if self.kernelURL is not None:
      oprot.writeFieldBegin('kernelURL', TType.STRING, 5)
      oprot.writeString(self.kernelURL)
      oprot.writeFieldEnd()
    if self.ramdiskId is not None:
      oprot.writeFieldBegin('ramdiskId', TType.STRING, 6)
      oprot.writeString(self.ramdiskId)
      oprot.writeFieldEnd()
    if self.ramdiskURL is not None:
      oprot.writeFieldBegin('ramdiskURL', TType.STRING, 7)
      oprot.writeString(self.ramdiskURL)
      oprot.writeFieldEnd()
    if self.reservationId is not None:
      oprot.writeFieldBegin('reservationId', TType.STRING, 8)
      oprot.writeString(self.reservationId)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 9)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.retries is not None:
      oprot.writeFieldBegin('retries', TType.I64, 10)
      oprot.writeI64(self.retries)
      oprot.writeFieldEnd()
    if self.stateName is not None:
      oprot.writeFieldBegin('stateName', TType.STRING, 11)
      oprot.writeString(self.stateName)
      oprot.writeFieldEnd()
    if self.stateCode is not None:
      oprot.writeFieldBegin('stateCode', TType.I64, 12)
      oprot.writeI64(self.stateCode)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I64, 13)
      oprot.writeI64(self.state)
      oprot.writeFieldEnd()
    if self.keyName is not None:
      oprot.writeFieldBegin('keyName', TType.STRING, 14)
      oprot.writeString(self.keyName)
      oprot.writeFieldEnd()
    if self.privateDnsName is not None:
      oprot.writeFieldBegin('privateDnsName', TType.STRING, 15)
      oprot.writeString(self.privateDnsName)
      oprot.writeFieldEnd()
    if self.dnsName is not None:
      oprot.writeFieldBegin('dnsName', TType.STRING, 16)
      oprot.writeString(self.dnsName)
      oprot.writeFieldEnd()
    if self.launchTime is not None:
      oprot.writeFieldBegin('launchTime', TType.I64, 17)
      oprot.writeI64(self.launchTime)
      oprot.writeFieldEnd()
    if self.terminationTime is not None:
      oprot.writeFieldBegin('terminationTime', TType.I64, 18)
      oprot.writeI64(self.terminationTime)
      oprot.writeFieldEnd()
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 19)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    if self.ncnet is not None:
      oprot.writeFieldBegin('ncnet', TType.STRUCT, 20)
      self.ncnet.write(oprot)
      oprot.writeFieldEnd()
    if self.userData is not None:
      oprot.writeFieldBegin('userData', TType.STRING, 21)
      oprot.writeString(self.userData)
      oprot.writeFieldEnd()
    if self.launchIndex is not None:
      oprot.writeFieldBegin('launchIndex', TType.STRING, 22)
      oprot.writeString(self.launchIndex)
      oprot.writeFieldEnd()
    if self.groupNames is not None:
      oprot.writeFieldBegin('groupNames', TType.LIST, 23)
      oprot.writeListBegin(TType.STRING, len(self.groupNames))
      for iter12 in self.groupNames:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.groupNamesSize is not None:
      oprot.writeFieldBegin('groupNamesSize', TType.I64, 24)
      oprot.writeI64(self.groupNamesSize)
      oprot.writeFieldEnd()
    if self.volumes is not None:
      oprot.writeFieldBegin('volumes', TType.LIST, 25)
      oprot.writeListBegin(TType.STRUCT, len(self.volumes))
      for iter13 in self.volumes:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.volumesSize is not None:
      oprot.writeFieldBegin('volumesSize', TType.I64, 26)
      oprot.writeI64(self.volumesSize)
      oprot.writeFieldEnd()
    if self.ncspiceinfo is not None:
      oprot.writeFieldBegin('ncspiceinfo', TType.STRUCT, 27)
      self.ncspiceinfo.write(oprot)
      oprot.writeFieldEnd()
    if self.bundle is not None:
      oprot.writeFieldBegin('bundle', TType.I64, 28)
      oprot.writeI64(self.bundle)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResourceInfo:
  """
  Attributes:
   - nodeStatus
   - memorySizeMax
   - memorySizeAvailable
   - diskSizeMax
   - diskSizeAvailable
   - numberOfCoresMax
   - numberOfCoresAvailable
   - publicSubnets
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeStatus', None, None, ), # 1
    (2, TType.I64, 'memorySizeMax', None, None, ), # 2
    (3, TType.I64, 'memorySizeAvailable', None, None, ), # 3
    (4, TType.I64, 'diskSizeMax', None, None, ), # 4
    (5, TType.I64, 'diskSizeAvailable', None, None, ), # 5
    (6, TType.I64, 'numberOfCoresMax', None, None, ), # 6
    (7, TType.I64, 'numberOfCoresAvailable', None, None, ), # 7
    (8, TType.STRING, 'publicSubnets', None, None, ), # 8
  )

  def __init__(self, nodeStatus=None, memorySizeMax=None, memorySizeAvailable=None, diskSizeMax=None, diskSizeAvailable=None, numberOfCoresMax=None, numberOfCoresAvailable=None, publicSubnets=None,):
    self.nodeStatus = nodeStatus
    self.memorySizeMax = memorySizeMax
    self.memorySizeAvailable = memorySizeAvailable
    self.diskSizeMax = diskSizeMax
    self.diskSizeAvailable = diskSizeAvailable
    self.numberOfCoresMax = numberOfCoresMax
    self.numberOfCoresAvailable = numberOfCoresAvailable
    self.publicSubnets = publicSubnets

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeStatus = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.memorySizeMax = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.memorySizeAvailable = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.diskSizeMax = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.diskSizeAvailable = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.numberOfCoresMax = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.numberOfCoresAvailable = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.publicSubnets = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResourceInfo')
    if self.nodeStatus is not None:
      oprot.writeFieldBegin('nodeStatus', TType.STRING, 1)
      oprot.writeString(self.nodeStatus)
      oprot.writeFieldEnd()
    if self.memorySizeMax is not None:
      oprot.writeFieldBegin('memorySizeMax', TType.I64, 2)
      oprot.writeI64(self.memorySizeMax)
      oprot.writeFieldEnd()
    if self.memorySizeAvailable is not None:
      oprot.writeFieldBegin('memorySizeAvailable', TType.I64, 3)
      oprot.writeI64(self.memorySizeAvailable)
      oprot.writeFieldEnd()
    if self.diskSizeMax is not None:
      oprot.writeFieldBegin('diskSizeMax', TType.I64, 4)
      oprot.writeI64(self.diskSizeMax)
      oprot.writeFieldEnd()
    if self.diskSizeAvailable is not None:
      oprot.writeFieldBegin('diskSizeAvailable', TType.I64, 5)
      oprot.writeI64(self.diskSizeAvailable)
      oprot.writeFieldEnd()
    if self.numberOfCoresMax is not None:
      oprot.writeFieldBegin('numberOfCoresMax', TType.I64, 6)
      oprot.writeI64(self.numberOfCoresMax)
      oprot.writeFieldEnd()
    if self.numberOfCoresAvailable is not None:
      oprot.writeFieldBegin('numberOfCoresAvailable', TType.I64, 7)
      oprot.writeI64(self.numberOfCoresAvailable)
      oprot.writeFieldEnd()
    if self.publicSubnets is not None:
      oprot.writeFieldBegin('publicSubnets', TType.STRING, 8)
      oprot.writeString(self.publicSubnets)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CCForRunInstance:
  """
  Attributes:
   - instanceId
   - imageId
   - imageURL
   - kernelId
   - kernelURL
   - ramdiskId
   - ramdiskURL
   - reservationId
   - userId
   - userData
   - launchIndex
   - keyName
   - params
   - targetNode
   - ncnet
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instanceId', None, None, ), # 1
    (2, TType.STRING, 'imageId', None, None, ), # 2
    (3, TType.STRING, 'imageURL', None, None, ), # 3
    (4, TType.STRING, 'kernelId', None, None, ), # 4
    (5, TType.STRING, 'kernelURL', None, None, ), # 5
    (6, TType.STRING, 'ramdiskId', None, None, ), # 6
    (7, TType.STRING, 'ramdiskURL', None, None, ), # 7
    (8, TType.STRING, 'reservationId', None, None, ), # 8
    (9, TType.STRING, 'userId', None, None, ), # 9
    (10, TType.STRING, 'userData', None, None, ), # 10
    (11, TType.STRING, 'launchIndex', None, None, ), # 11
    (12, TType.STRING, 'keyName', None, None, ), # 12
    (13, TType.STRUCT, 'params', (NCInstParams, NCInstParams.thrift_spec), None, ), # 13
    (14, TType.STRING, 'targetNode', None, None, ), # 14
    (15, TType.STRUCT, 'ncnet', (NCNetConf, NCNetConf.thrift_spec), None, ), # 15
  )

  def __init__(self, instanceId=None, imageId=None, imageURL=None, kernelId=None, kernelURL=None, ramdiskId=None, ramdiskURL=None, reservationId=None, userId=None, userData=None, launchIndex=None, keyName=None, params=None, targetNode=None, ncnet=None,):
    self.instanceId = instanceId
    self.imageId = imageId
    self.imageURL = imageURL
    self.kernelId = kernelId
    self.kernelURL = kernelURL
    self.ramdiskId = ramdiskId
    self.ramdiskURL = ramdiskURL
    self.reservationId = reservationId
    self.userId = userId
    self.userData = userData
    self.launchIndex = launchIndex
    self.keyName = keyName
    self.params = params
    self.targetNode = targetNode
    self.ncnet = ncnet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instanceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.imageId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.imageURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.kernelId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.kernelURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ramdiskId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ramdiskURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.reservationId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.userData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.launchIndex = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.keyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.params = NCInstParams()
          self.params.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.targetNode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.ncnet = NCNetConf()
          self.ncnet.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CCForRunInstance')
    if self.instanceId is not None:
      oprot.writeFieldBegin('instanceId', TType.STRING, 1)
      oprot.writeString(self.instanceId)
      oprot.writeFieldEnd()
    if self.imageId is not None:
      oprot.writeFieldBegin('imageId', TType.STRING, 2)
      oprot.writeString(self.imageId)
      oprot.writeFieldEnd()
    if self.imageURL is not None:
      oprot.writeFieldBegin('imageURL', TType.STRING, 3)
      oprot.writeString(self.imageURL)
      oprot.writeFieldEnd()
    if self.kernelId is not None:
      oprot.writeFieldBegin('kernelId', TType.STRING, 4)
      oprot.writeString(self.kernelId)
      oprot.writeFieldEnd()
    if self.kernelURL is not None:
      oprot.writeFieldBegin('kernelURL', TType.STRING, 5)
      oprot.writeString(self.kernelURL)
      oprot.writeFieldEnd()
    if self.ramdiskId is not None:
      oprot.writeFieldBegin('ramdiskId', TType.STRING, 6)
      oprot.writeString(self.ramdiskId)
      oprot.writeFieldEnd()
    if self.ramdiskURL is not None:
      oprot.writeFieldBegin('ramdiskURL', TType.STRING, 7)
      oprot.writeString(self.ramdiskURL)
      oprot.writeFieldEnd()
    if self.reservationId is not None:
      oprot.writeFieldBegin('reservationId', TType.STRING, 8)
      oprot.writeString(self.reservationId)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 9)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.userData is not None:
      oprot.writeFieldBegin('userData', TType.STRING, 10)
      oprot.writeString(self.userData)
      oprot.writeFieldEnd()
    if self.launchIndex is not None:
      oprot.writeFieldBegin('launchIndex', TType.STRING, 11)
      oprot.writeString(self.launchIndex)
      oprot.writeFieldEnd()
    if self.keyName is not None:
      oprot.writeFieldBegin('keyName', TType.STRING, 12)
      oprot.writeString(self.keyName)
      oprot.writeFieldEnd()
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.STRUCT, 13)
      self.params.write(oprot)
      oprot.writeFieldEnd()
    if self.targetNode is not None:
      oprot.writeFieldBegin('targetNode', TType.STRING, 14)
      oprot.writeString(self.targetNode)
      oprot.writeFieldEnd()
    if self.ncnet is not None:
      oprot.writeFieldBegin('ncnet', TType.STRUCT, 15)
      self.ncnet.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

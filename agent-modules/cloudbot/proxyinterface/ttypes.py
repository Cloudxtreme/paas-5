#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class thd_SERVICE_TYPE:
  CLOUD_REGISTRY = 0
  CLOUD_WEB = 1
  CLOUD_CLC = 2
  CLOUD_CC = 3
  CLOUD_WALRUS = 4
  CLOUD_NC = 5
  CLOUD_IFOLDER = 6

  _VALUES_TO_NAMES = {
    0: "CLOUD_REGISTRY",
    1: "CLOUD_WEB",
    2: "CLOUD_CLC",
    3: "CLOUD_CC",
    4: "CLOUD_WALRUS",
    5: "CLOUD_NC",
    6: "CLOUD_IFOLDER",
  }

  _NAMES_TO_VALUES = {
    "CLOUD_REGISTRY": 0,
    "CLOUD_WEB": 1,
    "CLOUD_CLC": 2,
    "CLOUD_CC": 3,
    "CLOUD_WALRUS": 4,
    "CLOUD_NC": 5,
    "CLOUD_IFOLDER": 6,
  }

class thd_TRANSACT_STATE:
  INIT = 0
  DOWNLOADING = 1
  DOWNLOAD_FINISHED = 2
  DOWNLOAD_FAILED = 3
  PENDING = 4
  RUNNING = 5
  RUN_FAILED = 6
  SHUTTING_DOWN = 7
  TERMINATED = 8
  SUBMITTING = 9
  SUBMIT_FAILED = 10
  SUBMIT_FINISHED = 11

  _VALUES_TO_NAMES = {
    0: "INIT",
    1: "DOWNLOADING",
    2: "DOWNLOAD_FINISHED",
    3: "DOWNLOAD_FAILED",
    4: "PENDING",
    5: "RUNNING",
    6: "RUN_FAILED",
    7: "SHUTTING_DOWN",
    8: "TERMINATED",
    9: "SUBMITTING",
    10: "SUBMIT_FAILED",
    11: "SUBMIT_FINISHED",
  }

  _NAMES_TO_VALUES = {
    "INIT": 0,
    "DOWNLOADING": 1,
    "DOWNLOAD_FINISHED": 2,
    "DOWNLOAD_FAILED": 3,
    "PENDING": 4,
    "RUNNING": 5,
    "RUN_FAILED": 6,
    "SHUTTING_DOWN": 7,
    "TERMINATED": 8,
    "SUBMITTING": 9,
    "SUBMIT_FAILED": 10,
    "SUBMIT_FINISHED": 11,
  }

class thd_port:
  THRIFT_CC_PORT = 9090
  THRIFT_NC_PORT = 9091
  THRIFT_CLC_PORT = 9092
  THRIFT_WALRUS_PORT = 9093
  THRIFT_LDAP_PORT = 9094
  THRIFT_DESKTOP_PORT = 9095
  THRIFT_IFOLDER_PORT = 9096

  _VALUES_TO_NAMES = {
    9090: "THRIFT_CC_PORT",
    9091: "THRIFT_NC_PORT",
    9092: "THRIFT_CLC_PORT",
    9093: "THRIFT_WALRUS_PORT",
    9094: "THRIFT_LDAP_PORT",
    9095: "THRIFT_DESKTOP_PORT",
    9096: "THRIFT_IFOLDER_PORT",
  }

  _NAMES_TO_VALUES = {
    "THRIFT_CC_PORT": 9090,
    "THRIFT_NC_PORT": 9091,
    "THRIFT_CLC_PORT": 9092,
    "THRIFT_WALRUS_PORT": 9093,
    "THRIFT_LDAP_PORT": 9094,
    "THRIFT_DESKTOP_PORT": 9095,
    "THRIFT_IFOLDER_PORT": 9096,
  }

class thd_MIGRATESTATE:
  INIT = 0
  MIGRATTING = 1
  MIGRATE_FINISHED = 2
  MIGRATE_FAILED = 3
  MIGRATE_FORBIDDEN = 4

  _VALUES_TO_NAMES = {
    0: "INIT",
    1: "MIGRATTING",
    2: "MIGRATE_FINISHED",
    3: "MIGRATE_FAILED",
    4: "MIGRATE_FORBIDDEN",
  }

  _NAMES_TO_VALUES = {
    "INIT": 0,
    "MIGRATTING": 1,
    "MIGRATE_FINISHED": 2,
    "MIGRATE_FAILED": 3,
    "MIGRATE_FORBIDDEN": 4,
  }


class thd_hard_source:
  """
  Attributes:
   - cpu_num
   - cpu_utilization
   - cpu_frequenc
   - total_memory
   - user_memory
   - free_memory
   - total_disk
   - user_disk
   - free_disk
   - net_receiverate
   - ip_address
   - state
   - cpu_style
   - net_sendrate
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cpu_num', None, None, ), # 1
    (2, TType.I64, 'cpu_utilization', None, None, ), # 2
    (3, TType.STRING, 'cpu_frequenc', None, None, ), # 3
    (4, TType.I64, 'total_memory', None, None, ), # 4
    (5, TType.I64, 'user_memory', None, None, ), # 5
    (6, TType.I64, 'free_memory', None, None, ), # 6
    (7, TType.I64, 'total_disk', None, None, ), # 7
    (8, TType.I64, 'user_disk', None, None, ), # 8
    (9, TType.I64, 'free_disk', None, None, ), # 9
    (10, TType.I64, 'net_receiverate', None, None, ), # 10
    (11, TType.STRING, 'ip_address', None, None, ), # 11
    (12, TType.STRING, 'state', None, None, ), # 12
    (13, TType.STRING, 'cpu_style', None, None, ), # 13
    (14, TType.I64, 'net_sendrate', None, None, ), # 14
  )

  def __init__(self, cpu_num=None, cpu_utilization=None, cpu_frequenc=None, total_memory=None, user_memory=None, free_memory=None, total_disk=None, user_disk=None, free_disk=None, net_receiverate=None, ip_address=None, state=None, cpu_style=None, net_sendrate=None,):
    self.cpu_num = cpu_num
    self.cpu_utilization = cpu_utilization
    self.cpu_frequenc = cpu_frequenc
    self.total_memory = total_memory
    self.user_memory = user_memory
    self.free_memory = free_memory
    self.total_disk = total_disk
    self.user_disk = user_disk
    self.free_disk = free_disk
    self.net_receiverate = net_receiverate
    self.ip_address = ip_address
    self.state = state
    self.cpu_style = cpu_style
    self.net_sendrate = net_sendrate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cpu_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.cpu_utilization = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cpu_frequenc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.total_memory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.user_memory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.free_memory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.total_disk = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.user_disk = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.free_disk = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.net_receiverate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.ip_address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.state = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.cpu_style = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.net_sendrate = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_hard_source')
    if self.cpu_num is not None:
      oprot.writeFieldBegin('cpu_num', TType.I64, 1)
      oprot.writeI64(self.cpu_num)
      oprot.writeFieldEnd()
    if self.cpu_utilization is not None:
      oprot.writeFieldBegin('cpu_utilization', TType.I64, 2)
      oprot.writeI64(self.cpu_utilization)
      oprot.writeFieldEnd()
    if self.cpu_frequenc is not None:
      oprot.writeFieldBegin('cpu_frequenc', TType.STRING, 3)
      oprot.writeString(self.cpu_frequenc)
      oprot.writeFieldEnd()
    if self.total_memory is not None:
      oprot.writeFieldBegin('total_memory', TType.I64, 4)
      oprot.writeI64(self.total_memory)
      oprot.writeFieldEnd()
    if self.user_memory is not None:
      oprot.writeFieldBegin('user_memory', TType.I64, 5)
      oprot.writeI64(self.user_memory)
      oprot.writeFieldEnd()
    if self.free_memory is not None:
      oprot.writeFieldBegin('free_memory', TType.I64, 6)
      oprot.writeI64(self.free_memory)
      oprot.writeFieldEnd()
    if self.total_disk is not None:
      oprot.writeFieldBegin('total_disk', TType.I64, 7)
      oprot.writeI64(self.total_disk)
      oprot.writeFieldEnd()
    if self.user_disk is not None:
      oprot.writeFieldBegin('user_disk', TType.I64, 8)
      oprot.writeI64(self.user_disk)
      oprot.writeFieldEnd()
    if self.free_disk is not None:
      oprot.writeFieldBegin('free_disk', TType.I64, 9)
      oprot.writeI64(self.free_disk)
      oprot.writeFieldEnd()
    if self.net_receiverate is not None:
      oprot.writeFieldBegin('net_receiverate', TType.I64, 10)
      oprot.writeI64(self.net_receiverate)
      oprot.writeFieldEnd()
    if self.ip_address is not None:
      oprot.writeFieldBegin('ip_address', TType.STRING, 11)
      oprot.writeString(self.ip_address)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRING, 12)
      oprot.writeString(self.state)
      oprot.writeFieldEnd()
    if self.cpu_style is not None:
      oprot.writeFieldBegin('cpu_style', TType.STRING, 13)
      oprot.writeString(self.cpu_style)
      oprot.writeFieldEnd()
    if self.net_sendrate is not None:
      oprot.writeFieldBegin('net_sendrate', TType.I64, 14)
      oprot.writeI64(self.net_sendrate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_service:
  """
  Attributes:
   - service_id
   - is_alive
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'service_id', None, None, ), # 1
    (2, TType.BOOL, 'is_alive', None, None, ), # 2
  )

  def __init__(self, service_id=None, is_alive=None,):
    self.service_id = service_id
    self.is_alive = is_alive

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.service_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_alive = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_service')
    if self.service_id is not None:
      oprot.writeFieldBegin('service_id', TType.I32, 1)
      oprot.writeI32(self.service_id)
      oprot.writeFieldEnd()
    if self.is_alive is not None:
      oprot.writeFieldBegin('is_alive', TType.BOOL, 2)
      oprot.writeBool(self.is_alive)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_service_list:
  """
  Attributes:
   - resource
   - paas_services
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'resource', (thd_hard_source, thd_hard_source.thrift_spec), None, ), # 1
    (2, TType.LIST, 'paas_services', (TType.STRUCT,(thd_service, thd_service.thrift_spec)), None, ), # 2
  )

  def __init__(self, resource=None, paas_services=None,):
    self.resource = resource
    self.paas_services = paas_services

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.resource = thd_hard_source()
          self.resource.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.paas_services = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = thd_service()
            _elem5.read(iprot)
            self.paas_services.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_service_list')
    if self.resource is not None:
      oprot.writeFieldBegin('resource', TType.STRUCT, 1)
      self.resource.write(oprot)
      oprot.writeFieldEnd()
    if self.paas_services is not None:
      oprot.writeFieldBegin('paas_services', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.paas_services))
      for iter6 in self.paas_services:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_instance_info:
  """
  Attributes:
   - instance_id
   - image_id
   - user
   - state
   - n_port
   - str_password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instance_id', None, None, ), # 1
    (2, TType.STRING, 'image_id', None, None, ), # 2
    (3, TType.STRING, 'user', None, None, ), # 3
    (4, TType.I32, 'state', None, None, ), # 4
    (5, TType.I64, 'n_port', None, None, ), # 5
    (6, TType.STRING, 'str_password', None, None, ), # 6
  )

  def __init__(self, instance_id=None, image_id=None, user=None, state=None, n_port=None, str_password=None,):
    self.instance_id = instance_id
    self.image_id = image_id
    self.user = user
    self.state = state
    self.n_port = n_port
    self.str_password = str_password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instance_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.image_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.n_port = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.str_password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_instance_info')
    if self.instance_id is not None:
      oprot.writeFieldBegin('instance_id', TType.STRING, 1)
      oprot.writeString(self.instance_id)
      oprot.writeFieldEnd()
    if self.image_id is not None:
      oprot.writeFieldBegin('image_id', TType.STRING, 2)
      oprot.writeString(self.image_id)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 3)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 4)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.n_port is not None:
      oprot.writeFieldBegin('n_port', TType.I64, 5)
      oprot.writeI64(self.n_port)
      oprot.writeFieldEnd()
    if self.str_password is not None:
      oprot.writeFieldBegin('str_password', TType.STRING, 6)
      oprot.writeString(self.str_password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_file:
  """
  Attributes:
   - fileName
   - createTime
   - size
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fileName', None, None, ), # 1
    (2, TType.I64, 'createTime', None, None, ), # 2
    (3, TType.I64, 'size', None, None, ), # 3
  )

  def __init__(self, fileName=None, createTime=None, size=None,):
    self.fileName = fileName
    self.createTime = createTime
    self.size = size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fileName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.size = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_file')
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 1)
      oprot.writeString(self.fileName)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 2)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I64, 3)
      oprot.writeI64(self.size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_run_schedule:
  """
  Attributes:
   - run_model
   - power_on_time
   - power_off_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'run_model', None, None, ), # 1
    (2, TType.STRING, 'power_on_time', None, None, ), # 2
    (3, TType.STRING, 'power_off_time', None, None, ), # 3
  )

  def __init__(self, run_model=None, power_on_time=None, power_off_time=None,):
    self.run_model = run_model
    self.power_on_time = power_on_time
    self.power_off_time = power_off_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.run_model = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.power_on_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.power_off_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_run_schedule')
    if self.run_model is not None:
      oprot.writeFieldBegin('run_model', TType.STRING, 1)
      oprot.writeString(self.run_model)
      oprot.writeFieldEnd()
    if self.power_on_time is not None:
      oprot.writeFieldBegin('power_on_time', TType.STRING, 2)
      oprot.writeString(self.power_on_time)
      oprot.writeFieldEnd()
    if self.power_off_time is not None:
      oprot.writeFieldBegin('power_off_time', TType.STRING, 3)
      oprot.writeString(self.power_off_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_net_info:
  """
  Attributes:
   - domain
   - net_mode
   - ip_dhcp
   - dns_dhcp
   - public_ip
   - private_ip
   - public_mac
   - private_mac
   - gateway
   - netmask
   - dns
   - wins
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.STRING, 'net_mode', None, None, ), # 2
    (3, TType.BOOL, 'ip_dhcp', None, None, ), # 3
    (4, TType.BOOL, 'dns_dhcp', None, None, ), # 4
    (5, TType.STRING, 'public_ip', None, None, ), # 5
    (6, TType.STRING, 'private_ip', None, None, ), # 6
    (7, TType.STRING, 'public_mac', None, None, ), # 7
    (8, TType.STRING, 'private_mac', None, None, ), # 8
    (9, TType.STRING, 'gateway', None, None, ), # 9
    (10, TType.STRING, 'netmask', None, None, ), # 10
    (11, TType.STRING, 'dns', None, None, ), # 11
    (12, TType.STRING, 'wins', None, None, ), # 12
  )

  def __init__(self, domain=None, net_mode=None, ip_dhcp=None, dns_dhcp=None, public_ip=None, private_ip=None, public_mac=None, private_mac=None, gateway=None, netmask=None, dns=None, wins=None,):
    self.domain = domain
    self.net_mode = net_mode
    self.ip_dhcp = ip_dhcp
    self.dns_dhcp = dns_dhcp
    self.public_ip = public_ip
    self.private_ip = private_ip
    self.public_mac = public_mac
    self.private_mac = private_mac
    self.gateway = gateway
    self.netmask = netmask
    self.dns = dns
    self.wins = wins

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.net_mode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.ip_dhcp = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.dns_dhcp = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.public_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.private_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.public_mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.private_mac = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.gateway = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.netmask = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.dns = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.wins = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_net_info')
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.net_mode is not None:
      oprot.writeFieldBegin('net_mode', TType.STRING, 2)
      oprot.writeString(self.net_mode)
      oprot.writeFieldEnd()
    if self.ip_dhcp is not None:
      oprot.writeFieldBegin('ip_dhcp', TType.BOOL, 3)
      oprot.writeBool(self.ip_dhcp)
      oprot.writeFieldEnd()
    if self.dns_dhcp is not None:
      oprot.writeFieldBegin('dns_dhcp', TType.BOOL, 4)
      oprot.writeBool(self.dns_dhcp)
      oprot.writeFieldEnd()
    if self.public_ip is not None:
      oprot.writeFieldBegin('public_ip', TType.STRING, 5)
      oprot.writeString(self.public_ip)
      oprot.writeFieldEnd()
    if self.private_ip is not None:
      oprot.writeFieldBegin('private_ip', TType.STRING, 6)
      oprot.writeString(self.private_ip)
      oprot.writeFieldEnd()
    if self.public_mac is not None:
      oprot.writeFieldBegin('public_mac', TType.STRING, 7)
      oprot.writeString(self.public_mac)
      oprot.writeFieldEnd()
    if self.private_mac is not None:
      oprot.writeFieldBegin('private_mac', TType.STRING, 8)
      oprot.writeString(self.private_mac)
      oprot.writeFieldEnd()
    if self.gateway is not None:
      oprot.writeFieldBegin('gateway', TType.STRING, 9)
      oprot.writeString(self.gateway)
      oprot.writeFieldEnd()
    if self.netmask is not None:
      oprot.writeFieldBegin('netmask', TType.STRING, 10)
      oprot.writeString(self.netmask)
      oprot.writeFieldEnd()
    if self.dns is not None:
      oprot.writeFieldBegin('dns', TType.STRING, 11)
      oprot.writeString(self.dns)
      oprot.writeFieldEnd()
    if self.wins is not None:
      oprot.writeFieldBegin('wins', TType.STRING, 12)
      oprot.writeString(self.wins)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_vm_info:
  """
  Attributes:
   - vm_cpu
   - vm_memory
   - vm_disk
   - machine_name
   - vm_protocol
   - display_mode
   - is_clear_power_off
   - vm_port
   - vm_password
   - is_run_without_copy
   - is_permit_write_file_to_image
   - number_of_screens
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vm_cpu', None, None, ), # 1
    (2, TType.I64, 'vm_memory', None, None, ), # 2
    (3, TType.I64, 'vm_disk', None, None, ), # 3
    (4, TType.STRING, 'machine_name', None, None, ), # 4
    (5, TType.STRING, 'vm_protocol', None, None, ), # 5
    (6, TType.STRING, 'display_mode', None, None, ), # 6
    (7, TType.BOOL, 'is_clear_power_off', None, None, ), # 7
    (8, TType.I64, 'vm_port', None, None, ), # 8
    (9, TType.STRING, 'vm_password', None, None, ), # 9
    (10, TType.BOOL, 'is_run_without_copy', None, None, ), # 10
    (11, TType.BOOL, 'is_permit_write_file_to_image', None, None, ), # 11
    (12, TType.I64, 'number_of_screens', None, None, ), # 12
  )

  def __init__(self, vm_cpu=None, vm_memory=None, vm_disk=None, machine_name=None, vm_protocol=None, display_mode=None, is_clear_power_off=None, vm_port=None, vm_password=None, is_run_without_copy=None, is_permit_write_file_to_image=None, number_of_screens=None,):
    self.vm_cpu = vm_cpu
    self.vm_memory = vm_memory
    self.vm_disk = vm_disk
    self.machine_name = machine_name
    self.vm_protocol = vm_protocol
    self.display_mode = display_mode
    self.is_clear_power_off = is_clear_power_off
    self.vm_port = vm_port
    self.vm_password = vm_password
    self.is_run_without_copy = is_run_without_copy
    self.is_permit_write_file_to_image = is_permit_write_file_to_image
    self.number_of_screens = number_of_screens

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vm_cpu = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.vm_memory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.vm_disk = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.machine_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.vm_protocol = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.display_mode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_clear_power_off = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.vm_port = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.vm_password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.is_run_without_copy = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.is_permit_write_file_to_image = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.number_of_screens = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_vm_info')
    if self.vm_cpu is not None:
      oprot.writeFieldBegin('vm_cpu', TType.I64, 1)
      oprot.writeI64(self.vm_cpu)
      oprot.writeFieldEnd()
    if self.vm_memory is not None:
      oprot.writeFieldBegin('vm_memory', TType.I64, 2)
      oprot.writeI64(self.vm_memory)
      oprot.writeFieldEnd()
    if self.vm_disk is not None:
      oprot.writeFieldBegin('vm_disk', TType.I64, 3)
      oprot.writeI64(self.vm_disk)
      oprot.writeFieldEnd()
    if self.machine_name is not None:
      oprot.writeFieldBegin('machine_name', TType.STRING, 4)
      oprot.writeString(self.machine_name)
      oprot.writeFieldEnd()
    if self.vm_protocol is not None:
      oprot.writeFieldBegin('vm_protocol', TType.STRING, 5)
      oprot.writeString(self.vm_protocol)
      oprot.writeFieldEnd()
    if self.display_mode is not None:
      oprot.writeFieldBegin('display_mode', TType.STRING, 6)
      oprot.writeString(self.display_mode)
      oprot.writeFieldEnd()
    if self.is_clear_power_off is not None:
      oprot.writeFieldBegin('is_clear_power_off', TType.BOOL, 7)
      oprot.writeBool(self.is_clear_power_off)
      oprot.writeFieldEnd()
    if self.vm_port is not None:
      oprot.writeFieldBegin('vm_port', TType.I64, 8)
      oprot.writeI64(self.vm_port)
      oprot.writeFieldEnd()
    if self.vm_password is not None:
      oprot.writeFieldBegin('vm_password', TType.STRING, 9)
      oprot.writeString(self.vm_password)
      oprot.writeFieldEnd()
    if self.is_run_without_copy is not None:
      oprot.writeFieldBegin('is_run_without_copy', TType.BOOL, 10)
      oprot.writeBool(self.is_run_without_copy)
      oprot.writeFieldEnd()
    if self.is_permit_write_file_to_image is not None:
      oprot.writeFieldBegin('is_permit_write_file_to_image', TType.BOOL, 11)
      oprot.writeBool(self.is_permit_write_file_to_image)
      oprot.writeFieldEnd()
    if self.number_of_screens is not None:
      oprot.writeFieldBegin('number_of_screens', TType.I64, 12)
      oprot.writeI64(self.number_of_screens)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_peripheral:
  """
  Attributes:
   - is_support_peripheral
   - is_support_usb
   - max_usb_number
   - is_support_parallel
   - is_support_com
   - is_cdrom
   - is_external_device
   - external_disk
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_support_peripheral', None, None, ), # 1
    (2, TType.BOOL, 'is_support_usb', None, None, ), # 2
    (3, TType.I64, 'max_usb_number', None, None, ), # 3
    (4, TType.BOOL, 'is_support_parallel', None, None, ), # 4
    (5, TType.BOOL, 'is_support_com', None, None, ), # 5
    (6, TType.BOOL, 'is_cdrom', None, None, ), # 6
    (7, TType.BOOL, 'is_external_device', None, None, ), # 7
    (8, TType.I64, 'external_disk', None, None, ), # 8
  )

  def __init__(self, is_support_peripheral=None, is_support_usb=None, max_usb_number=None, is_support_parallel=None, is_support_com=None, is_cdrom=None, is_external_device=None, external_disk=None,):
    self.is_support_peripheral = is_support_peripheral
    self.is_support_usb = is_support_usb
    self.max_usb_number = max_usb_number
    self.is_support_parallel = is_support_parallel
    self.is_support_com = is_support_com
    self.is_cdrom = is_cdrom
    self.is_external_device = is_external_device
    self.external_disk = external_disk

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_support_peripheral = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_support_usb = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.max_usb_number = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.is_support_parallel = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.is_support_com = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.is_cdrom = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.is_external_device = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.external_disk = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_peripheral')
    if self.is_support_peripheral is not None:
      oprot.writeFieldBegin('is_support_peripheral', TType.BOOL, 1)
      oprot.writeBool(self.is_support_peripheral)
      oprot.writeFieldEnd()
    if self.is_support_usb is not None:
      oprot.writeFieldBegin('is_support_usb', TType.BOOL, 2)
      oprot.writeBool(self.is_support_usb)
      oprot.writeFieldEnd()
    if self.max_usb_number is not None:
      oprot.writeFieldBegin('max_usb_number', TType.I64, 3)
      oprot.writeI64(self.max_usb_number)
      oprot.writeFieldEnd()
    if self.is_support_parallel is not None:
      oprot.writeFieldBegin('is_support_parallel', TType.BOOL, 4)
      oprot.writeBool(self.is_support_parallel)
      oprot.writeFieldEnd()
    if self.is_support_com is not None:
      oprot.writeFieldBegin('is_support_com', TType.BOOL, 5)
      oprot.writeBool(self.is_support_com)
      oprot.writeFieldEnd()
    if self.is_cdrom is not None:
      oprot.writeFieldBegin('is_cdrom', TType.BOOL, 6)
      oprot.writeBool(self.is_cdrom)
      oprot.writeFieldEnd()
    if self.is_external_device is not None:
      oprot.writeFieldBegin('is_external_device', TType.BOOL, 7)
      oprot.writeBool(self.is_external_device)
      oprot.writeFieldEnd()
    if self.external_disk is not None:
      oprot.writeFieldBegin('external_disk', TType.I64, 8)
      oprot.writeI64(self.external_disk)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_support_snapshot:
  """
  Attributes:
   - is_snapshot
   - max_snapshot
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_snapshot', None, None, ), # 1
    (2, TType.I64, 'max_snapshot', None, None, ), # 2
  )

  def __init__(self, is_snapshot=None, max_snapshot=None,):
    self.is_snapshot = is_snapshot
    self.max_snapshot = max_snapshot

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_snapshot = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.max_snapshot = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_support_snapshot')
    if self.is_snapshot is not None:
      oprot.writeFieldBegin('is_snapshot', TType.BOOL, 1)
      oprot.writeBool(self.is_snapshot)
      oprot.writeFieldEnd()
    if self.max_snapshot is not None:
      oprot.writeFieldBegin('max_snapshot', TType.I64, 2)
      oprot.writeI64(self.max_snapshot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_thermophoresis:
  """
  Attributes:
   - is_thermophoresis
   - thermophoresis_cluster
   - thermophoresis_node
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_thermophoresis', None, None, ), # 1
    (2, TType.STRING, 'thermophoresis_cluster', None, None, ), # 2
    (3, TType.STRING, 'thermophoresis_node', None, None, ), # 3
  )

  def __init__(self, is_thermophoresis=None, thermophoresis_cluster=None, thermophoresis_node=None,):
    self.is_thermophoresis = is_thermophoresis
    self.thermophoresis_cluster = thermophoresis_cluster
    self.thermophoresis_node = thermophoresis_node

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_thermophoresis = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.thermophoresis_cluster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.thermophoresis_node = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_thermophoresis')
    if self.is_thermophoresis is not None:
      oprot.writeFieldBegin('is_thermophoresis', TType.BOOL, 1)
      oprot.writeBool(self.is_thermophoresis)
      oprot.writeFieldEnd()
    if self.thermophoresis_cluster is not None:
      oprot.writeFieldBegin('thermophoresis_cluster', TType.STRING, 2)
      oprot.writeString(self.thermophoresis_cluster)
      oprot.writeFieldEnd()
    if self.thermophoresis_node is not None:
      oprot.writeFieldBegin('thermophoresis_node', TType.STRING, 3)
      oprot.writeString(self.thermophoresis_node)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_instance_state:
  """
  Attributes:
   - instance_type
   - is_can_run
   - download_progress
   - state
   - is_local
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instance_type', None, None, ), # 1
    (2, TType.BOOL, 'is_can_run', None, None, ), # 2
    (3, TType.I64, 'download_progress', None, None, ), # 3
    (4, TType.I32, 'state', None, None, ), # 4
    (5, TType.BOOL, 'is_local', None, None, ), # 5
  )

  def __init__(self, instance_type=None, is_can_run=None, download_progress=None, state=None, is_local=None,):
    self.instance_type = instance_type
    self.is_can_run = is_can_run
    self.download_progress = download_progress
    self.state = state
    self.is_local = is_local

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instance_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_can_run = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.download_progress = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.is_local = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_instance_state')
    if self.instance_type is not None:
      oprot.writeFieldBegin('instance_type', TType.STRING, 1)
      oprot.writeString(self.instance_type)
      oprot.writeFieldEnd()
    if self.is_can_run is not None:
      oprot.writeFieldBegin('is_can_run', TType.BOOL, 2)
      oprot.writeBool(self.is_can_run)
      oprot.writeFieldEnd()
    if self.download_progress is not None:
      oprot.writeFieldBegin('download_progress', TType.I64, 3)
      oprot.writeI64(self.download_progress)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 4)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.is_local is not None:
      oprot.writeFieldBegin('is_local', TType.BOOL, 5)
      oprot.writeBool(self.is_local)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_vmConfig:
  """
  Attributes:
   - id
   - user
   - user_department_id
   - image_id
   - is_assign_node
   - node_ip
   - thermophoresis
   - run_schedule
   - net_info
   - vm_info
   - snapshot
   - peripheral
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'user', None, None, ), # 2
    (3, TType.I64, 'user_department_id', None, None, ), # 3
    (4, TType.STRING, 'image_id', None, None, ), # 4
    None, # 5
    (6, TType.BOOL, 'is_assign_node', None, None, ), # 6
    (7, TType.STRING, 'node_ip', None, None, ), # 7
    (8, TType.STRUCT, 'thermophoresis', (thd_thermophoresis, thd_thermophoresis.thrift_spec), None, ), # 8
    (9, TType.STRUCT, 'run_schedule', (thd_run_schedule, thd_run_schedule.thrift_spec), None, ), # 9
    (10, TType.STRUCT, 'net_info', (thd_net_info, thd_net_info.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'vm_info', (thd_vm_info, thd_vm_info.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'snapshot', (thd_support_snapshot, thd_support_snapshot.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'peripheral', (thd_peripheral, thd_peripheral.thrift_spec), None, ), # 13
  )

  def __init__(self, id=None, user=None, user_department_id=None, image_id=None, is_assign_node=None, node_ip=None, thermophoresis=None, run_schedule=None, net_info=None, vm_info=None, snapshot=None, peripheral=None,):
    self.id = id
    self.user = user
    self.user_department_id = user_department_id
    self.image_id = image_id
    self.is_assign_node = is_assign_node
    self.node_ip = node_ip
    self.thermophoresis = thermophoresis
    self.run_schedule = run_schedule
    self.net_info = net_info
    self.vm_info = vm_info
    self.snapshot = snapshot
    self.peripheral = peripheral

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_department_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.image_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.is_assign_node = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.node_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.thermophoresis = thd_thermophoresis()
          self.thermophoresis.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.run_schedule = thd_run_schedule()
          self.run_schedule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.net_info = thd_net_info()
          self.net_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.vm_info = thd_vm_info()
          self.vm_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.snapshot = thd_support_snapshot()
          self.snapshot.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.peripheral = thd_peripheral()
          self.peripheral.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_vmConfig')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 2)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.user_department_id is not None:
      oprot.writeFieldBegin('user_department_id', TType.I64, 3)
      oprot.writeI64(self.user_department_id)
      oprot.writeFieldEnd()
    if self.image_id is not None:
      oprot.writeFieldBegin('image_id', TType.STRING, 4)
      oprot.writeString(self.image_id)
      oprot.writeFieldEnd()
    if self.is_assign_node is not None:
      oprot.writeFieldBegin('is_assign_node', TType.BOOL, 6)
      oprot.writeBool(self.is_assign_node)
      oprot.writeFieldEnd()
    if self.node_ip is not None:
      oprot.writeFieldBegin('node_ip', TType.STRING, 7)
      oprot.writeString(self.node_ip)
      oprot.writeFieldEnd()
    if self.thermophoresis is not None:
      oprot.writeFieldBegin('thermophoresis', TType.STRUCT, 8)
      self.thermophoresis.write(oprot)
      oprot.writeFieldEnd()
    if self.run_schedule is not None:
      oprot.writeFieldBegin('run_schedule', TType.STRUCT, 9)
      self.run_schedule.write(oprot)
      oprot.writeFieldEnd()
    if self.net_info is not None:
      oprot.writeFieldBegin('net_info', TType.STRUCT, 10)
      self.net_info.write(oprot)
      oprot.writeFieldEnd()
    if self.vm_info is not None:
      oprot.writeFieldBegin('vm_info', TType.STRUCT, 11)
      self.vm_info.write(oprot)
      oprot.writeFieldEnd()
    if self.snapshot is not None:
      oprot.writeFieldBegin('snapshot', TType.STRUCT, 12)
      self.snapshot.write(oprot)
      oprot.writeFieldEnd()
    if self.peripheral is not None:
      oprot.writeFieldBegin('peripheral', TType.STRUCT, 13)
      self.peripheral.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_client_info:
  """
  Attributes:
   - client_data_id
   - image_id
   - user
   - node_ip
   - user_department_id
   - os_type
   - platform
   - image_category
   - image_size
   - thermophoresis
   - run_schedule
   - net_info
   - vm_info
   - snapshot
   - peripheral
   - instance_state
   - vmconfig_id
   - is_assign_node
   - image_name
   - run_as_super
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_data_id', None, None, ), # 1
    (2, TType.STRING, 'image_id', None, None, ), # 2
    (3, TType.STRING, 'user', None, None, ), # 3
    (4, TType.STRING, 'node_ip', None, None, ), # 4
    (5, TType.I64, 'user_department_id', None, None, ), # 5
    (6, TType.STRING, 'os_type', None, None, ), # 6
    (7, TType.STRING, 'platform', None, None, ), # 7
    (8, TType.I64, 'image_category', None, None, ), # 8
    (9, TType.I64, 'image_size', None, None, ), # 9
    (10, TType.STRUCT, 'thermophoresis', (thd_thermophoresis, thd_thermophoresis.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'run_schedule', (thd_run_schedule, thd_run_schedule.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'net_info', (thd_net_info, thd_net_info.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'vm_info', (thd_vm_info, thd_vm_info.thrift_spec), None, ), # 13
    (14, TType.STRUCT, 'snapshot', (thd_support_snapshot, thd_support_snapshot.thrift_spec), None, ), # 14
    (15, TType.STRUCT, 'peripheral', (thd_peripheral, thd_peripheral.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'instance_state', (thd_instance_state, thd_instance_state.thrift_spec), None, ), # 16
    (17, TType.STRING, 'vmconfig_id', None, None, ), # 17
    (18, TType.BOOL, 'is_assign_node', None, None, ), # 18
    (19, TType.STRING, 'image_name', None, None, ), # 19
    (20, TType.BOOL, 'run_as_super', None, None, ), # 20
  )

  def __init__(self, client_data_id=None, image_id=None, user=None, node_ip=None, user_department_id=None, os_type=None, platform=None, image_category=None, image_size=None, thermophoresis=None, run_schedule=None, net_info=None, vm_info=None, snapshot=None, peripheral=None, instance_state=None, vmconfig_id=None, is_assign_node=None, image_name=None, run_as_super=None,):
    self.client_data_id = client_data_id
    self.image_id = image_id
    self.user = user
    self.node_ip = node_ip
    self.user_department_id = user_department_id
    self.os_type = os_type
    self.platform = platform
    self.image_category = image_category
    self.image_size = image_size
    self.thermophoresis = thermophoresis
    self.run_schedule = run_schedule
    self.net_info = net_info
    self.vm_info = vm_info
    self.snapshot = snapshot
    self.peripheral = peripheral
    self.instance_state = instance_state
    self.vmconfig_id = vmconfig_id
    self.is_assign_node = is_assign_node
    self.image_name = image_name
    self.run_as_super = run_as_super

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_data_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.image_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.node_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.user_department_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.os_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.platform = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.image_category = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.image_size = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.thermophoresis = thd_thermophoresis()
          self.thermophoresis.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.run_schedule = thd_run_schedule()
          self.run_schedule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.net_info = thd_net_info()
          self.net_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.vm_info = thd_vm_info()
          self.vm_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.snapshot = thd_support_snapshot()
          self.snapshot.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.peripheral = thd_peripheral()
          self.peripheral.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.instance_state = thd_instance_state()
          self.instance_state.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.vmconfig_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.is_assign_node = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.image_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.run_as_super = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_client_info')
    if self.client_data_id is not None:
      oprot.writeFieldBegin('client_data_id', TType.STRING, 1)
      oprot.writeString(self.client_data_id)
      oprot.writeFieldEnd()
    if self.image_id is not None:
      oprot.writeFieldBegin('image_id', TType.STRING, 2)
      oprot.writeString(self.image_id)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 3)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.node_ip is not None:
      oprot.writeFieldBegin('node_ip', TType.STRING, 4)
      oprot.writeString(self.node_ip)
      oprot.writeFieldEnd()
    if self.user_department_id is not None:
      oprot.writeFieldBegin('user_department_id', TType.I64, 5)
      oprot.writeI64(self.user_department_id)
      oprot.writeFieldEnd()
    if self.os_type is not None:
      oprot.writeFieldBegin('os_type', TType.STRING, 6)
      oprot.writeString(self.os_type)
      oprot.writeFieldEnd()
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.STRING, 7)
      oprot.writeString(self.platform)
      oprot.writeFieldEnd()
    if self.image_category is not None:
      oprot.writeFieldBegin('image_category', TType.I64, 8)
      oprot.writeI64(self.image_category)
      oprot.writeFieldEnd()
    if self.image_size is not None:
      oprot.writeFieldBegin('image_size', TType.I64, 9)
      oprot.writeI64(self.image_size)
      oprot.writeFieldEnd()
    if self.thermophoresis is not None:
      oprot.writeFieldBegin('thermophoresis', TType.STRUCT, 10)
      self.thermophoresis.write(oprot)
      oprot.writeFieldEnd()
    if self.run_schedule is not None:
      oprot.writeFieldBegin('run_schedule', TType.STRUCT, 11)
      self.run_schedule.write(oprot)
      oprot.writeFieldEnd()
    if self.net_info is not None:
      oprot.writeFieldBegin('net_info', TType.STRUCT, 12)
      self.net_info.write(oprot)
      oprot.writeFieldEnd()
    if self.vm_info is not None:
      oprot.writeFieldBegin('vm_info', TType.STRUCT, 13)
      self.vm_info.write(oprot)
      oprot.writeFieldEnd()
    if self.snapshot is not None:
      oprot.writeFieldBegin('snapshot', TType.STRUCT, 14)
      self.snapshot.write(oprot)
      oprot.writeFieldEnd()
    if self.peripheral is not None:
      oprot.writeFieldBegin('peripheral', TType.STRUCT, 15)
      self.peripheral.write(oprot)
      oprot.writeFieldEnd()
    if self.instance_state is not None:
      oprot.writeFieldBegin('instance_state', TType.STRUCT, 16)
      self.instance_state.write(oprot)
      oprot.writeFieldEnd()
    if self.vmconfig_id is not None:
      oprot.writeFieldBegin('vmconfig_id', TType.STRING, 17)
      oprot.writeString(self.vmconfig_id)
      oprot.writeFieldEnd()
    if self.is_assign_node is not None:
      oprot.writeFieldBegin('is_assign_node', TType.BOOL, 18)
      oprot.writeBool(self.is_assign_node)
      oprot.writeFieldEnd()
    if self.image_name is not None:
      oprot.writeFieldBegin('image_name', TType.STRING, 19)
      oprot.writeString(self.image_name)
      oprot.writeFieldEnd()
    if self.run_as_super is not None:
      oprot.writeFieldBegin('run_as_super', TType.BOOL, 20)
      oprot.writeBool(self.run_as_super)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_run_instance_ret:
  """
  Attributes:
   - node_ip
   - return_value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'node_ip', None, None, ), # 1
    (2, TType.I64, 'return_value', None, None, ), # 2
  )

  def __init__(self, node_ip=None, return_value=None,):
    self.node_ip = node_ip
    self.return_value = return_value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.node_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.return_value = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_run_instance_ret')
    if self.node_ip is not None:
      oprot.writeFieldBegin('node_ip', TType.STRING, 1)
      oprot.writeString(self.node_ip)
      oprot.writeFieldEnd()
    if self.return_value is not None:
      oprot.writeFieldBegin('return_value', TType.I64, 2)
      oprot.writeI64(self.return_value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_NodeInfo:
  """
  Attributes:
   - hostIp
   - clusterName
   - freeCPUs
   - freeDisk
   - freeMem
   - totalCPUs
   - totalDisk
   - totalMem
   - isLocal
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hostIp', None, None, ), # 1
    (2, TType.STRING, 'clusterName', None, None, ), # 2
    (3, TType.I64, 'freeCPUs', None, None, ), # 3
    (4, TType.I64, 'freeDisk', None, None, ), # 4
    (5, TType.I64, 'freeMem', None, None, ), # 5
    (6, TType.I64, 'totalCPUs', None, None, ), # 6
    (7, TType.I64, 'totalDisk', None, None, ), # 7
    (8, TType.I64, 'totalMem', None, None, ), # 8
    (9, TType.BOOL, 'isLocal', None, None, ), # 9
  )

  def __init__(self, hostIp=None, clusterName=None, freeCPUs=None, freeDisk=None, freeMem=None, totalCPUs=None, totalDisk=None, totalMem=None, isLocal=None,):
    self.hostIp = hostIp
    self.clusterName = clusterName
    self.freeCPUs = freeCPUs
    self.freeDisk = freeDisk
    self.freeMem = freeMem
    self.totalCPUs = totalCPUs
    self.totalDisk = totalDisk
    self.totalMem = totalMem
    self.isLocal = isLocal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hostIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clusterName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.freeCPUs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.freeDisk = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.freeMem = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.totalCPUs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.totalDisk = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.totalMem = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.isLocal = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_NodeInfo')
    if self.hostIp is not None:
      oprot.writeFieldBegin('hostIp', TType.STRING, 1)
      oprot.writeString(self.hostIp)
      oprot.writeFieldEnd()
    if self.clusterName is not None:
      oprot.writeFieldBegin('clusterName', TType.STRING, 2)
      oprot.writeString(self.clusterName)
      oprot.writeFieldEnd()
    if self.freeCPUs is not None:
      oprot.writeFieldBegin('freeCPUs', TType.I64, 3)
      oprot.writeI64(self.freeCPUs)
      oprot.writeFieldEnd()
    if self.freeDisk is not None:
      oprot.writeFieldBegin('freeDisk', TType.I64, 4)
      oprot.writeI64(self.freeDisk)
      oprot.writeFieldEnd()
    if self.freeMem is not None:
      oprot.writeFieldBegin('freeMem', TType.I64, 5)
      oprot.writeI64(self.freeMem)
      oprot.writeFieldEnd()
    if self.totalCPUs is not None:
      oprot.writeFieldBegin('totalCPUs', TType.I64, 6)
      oprot.writeI64(self.totalCPUs)
      oprot.writeFieldEnd()
    if self.totalDisk is not None:
      oprot.writeFieldBegin('totalDisk', TType.I64, 7)
      oprot.writeI64(self.totalDisk)
      oprot.writeFieldEnd()
    if self.totalMem is not None:
      oprot.writeFieldBegin('totalMem', TType.I64, 8)
      oprot.writeI64(self.totalMem)
      oprot.writeFieldEnd()
    if self.isLocal is not None:
      oprot.writeFieldBegin('isLocal', TType.BOOL, 9)
      oprot.writeBool(self.isLocal)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_ClusterInfo:
  """
  Attributes:
   - clusterName
   - hostIp
   - HYPERVISOR
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clusterName', None, None, ), # 1
    (2, TType.STRING, 'hostIp', None, None, ), # 2
    (3, TType.STRING, 'HYPERVISOR', None, None, ), # 3
  )

  def __init__(self, clusterName=None, hostIp=None, HYPERVISOR=None,):
    self.clusterName = clusterName
    self.hostIp = hostIp
    self.HYPERVISOR = HYPERVISOR

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clusterName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.HYPERVISOR = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_ClusterInfo')
    if self.clusterName is not None:
      oprot.writeFieldBegin('clusterName', TType.STRING, 1)
      oprot.writeString(self.clusterName)
      oprot.writeFieldEnd()
    if self.hostIp is not None:
      oprot.writeFieldBegin('hostIp', TType.STRING, 2)
      oprot.writeString(self.hostIp)
      oprot.writeFieldEnd()
    if self.HYPERVISOR is not None:
      oprot.writeFieldBegin('HYPERVISOR', TType.STRING, 3)
      oprot.writeString(self.HYPERVISOR)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_DomainInfo:
  """
  Attributes:
   - domain
   - domainHost
   - UserNAME
   - encryptedPassword
   - baseDN
   - port
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain', None, None, ), # 1
    (2, TType.STRING, 'domainHost', None, None, ), # 2
    (3, TType.STRING, 'UserNAME', None, None, ), # 3
    (4, TType.STRING, 'encryptedPassword', None, None, ), # 4
    (5, TType.STRING, 'baseDN', None, None, ), # 5
    (6, TType.I64, 'port', None, None, ), # 6
  )

  def __init__(self, domain=None, domainHost=None, UserNAME=None, encryptedPassword=None, baseDN=None, port=None,):
    self.domain = domain
    self.domainHost = domainHost
    self.UserNAME = UserNAME
    self.encryptedPassword = encryptedPassword
    self.baseDN = baseDN
    self.port = port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domainHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.UserNAME = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.encryptedPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.baseDN = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.port = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_DomainInfo')
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 1)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.domainHost is not None:
      oprot.writeFieldBegin('domainHost', TType.STRING, 2)
      oprot.writeString(self.domainHost)
      oprot.writeFieldEnd()
    if self.UserNAME is not None:
      oprot.writeFieldBegin('UserNAME', TType.STRING, 3)
      oprot.writeString(self.UserNAME)
      oprot.writeFieldEnd()
    if self.encryptedPassword is not None:
      oprot.writeFieldBegin('encryptedPassword', TType.STRING, 4)
      oprot.writeString(self.encryptedPassword)
      oprot.writeFieldEnd()
    if self.baseDN is not None:
      oprot.writeFieldBegin('baseDN', TType.STRING, 5)
      oprot.writeString(self.baseDN)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I64, 6)
      oprot.writeI64(self.port)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_ImageInfo:
  """
  Attributes:
   - imageId
   - imageLocation
   - imageState
   - imageOwnerId
   - architecture
   - imageType
   - kernelId
   - ramdiskId
   - isPublic
   - signature
   - name
   - imageCategory
   - description
   - platform
   - ownerName
   - vmStyle
   - Groups
   - OS
   - createTime
   - size
   - manifest
   - HYPERVISOR
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'imageId', None, None, ), # 1
    (2, TType.STRING, 'imageLocation', None, None, ), # 2
    (3, TType.STRING, 'imageState', None, None, ), # 3
    (4, TType.STRING, 'imageOwnerId', None, None, ), # 4
    (5, TType.STRING, 'architecture', None, None, ), # 5
    (6, TType.STRING, 'imageType', None, None, ), # 6
    (7, TType.STRING, 'kernelId', None, None, ), # 7
    (8, TType.STRING, 'ramdiskId', None, None, ), # 8
    (9, TType.I64, 'isPublic', None, None, ), # 9
    (10, TType.STRING, 'signature', None, None, ), # 10
    (11, TType.STRING, 'name', None, None, ), # 11
    (12, TType.I64, 'imageCategory', None, None, ), # 12
    (13, TType.STRING, 'description', None, None, ), # 13
    (14, TType.STRING, 'platform', None, None, ), # 14
    (15, TType.STRING, 'ownerName', None, None, ), # 15
    (16, TType.STRING, 'vmStyle', None, None, ), # 16
    (17, TType.STRING, 'Groups', None, None, ), # 17
    (18, TType.STRING, 'OS', None, None, ), # 18
    (19, TType.STRING, 'createTime', None, None, ), # 19
    (20, TType.I64, 'size', None, None, ), # 20
    (21, TType.STRING, 'manifest', None, None, ), # 21
    (22, TType.STRING, 'HYPERVISOR', None, None, ), # 22
  )

  def __init__(self, imageId=None, imageLocation=None, imageState=None, imageOwnerId=None, architecture=None, imageType=None, kernelId=None, ramdiskId=None, isPublic=None, signature=None, name=None, imageCategory=None, description=None, platform=None, ownerName=None, vmStyle=None, Groups=None, OS=None, createTime=None, size=None, manifest=None, HYPERVISOR=None,):
    self.imageId = imageId
    self.imageLocation = imageLocation
    self.imageState = imageState
    self.imageOwnerId = imageOwnerId
    self.architecture = architecture
    self.imageType = imageType
    self.kernelId = kernelId
    self.ramdiskId = ramdiskId
    self.isPublic = isPublic
    self.signature = signature
    self.name = name
    self.imageCategory = imageCategory
    self.description = description
    self.platform = platform
    self.ownerName = ownerName
    self.vmStyle = vmStyle
    self.Groups = Groups
    self.OS = OS
    self.createTime = createTime
    self.size = size
    self.manifest = manifest
    self.HYPERVISOR = HYPERVISOR

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.imageId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.imageLocation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.imageState = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.imageOwnerId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.architecture = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.imageType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.kernelId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.ramdiskId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.isPublic = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.signature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.imageCategory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.platform = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.ownerName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.vmStyle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.Groups = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.OS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.createTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.size = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.manifest = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.HYPERVISOR = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_ImageInfo')
    if self.imageId is not None:
      oprot.writeFieldBegin('imageId', TType.STRING, 1)
      oprot.writeString(self.imageId)
      oprot.writeFieldEnd()
    if self.imageLocation is not None:
      oprot.writeFieldBegin('imageLocation', TType.STRING, 2)
      oprot.writeString(self.imageLocation)
      oprot.writeFieldEnd()
    if self.imageState is not None:
      oprot.writeFieldBegin('imageState', TType.STRING, 3)
      oprot.writeString(self.imageState)
      oprot.writeFieldEnd()
    if self.imageOwnerId is not None:
      oprot.writeFieldBegin('imageOwnerId', TType.STRING, 4)
      oprot.writeString(self.imageOwnerId)
      oprot.writeFieldEnd()
    if self.architecture is not None:
      oprot.writeFieldBegin('architecture', TType.STRING, 5)
      oprot.writeString(self.architecture)
      oprot.writeFieldEnd()
    if self.imageType is not None:
      oprot.writeFieldBegin('imageType', TType.STRING, 6)
      oprot.writeString(self.imageType)
      oprot.writeFieldEnd()
    if self.kernelId is not None:
      oprot.writeFieldBegin('kernelId', TType.STRING, 7)
      oprot.writeString(self.kernelId)
      oprot.writeFieldEnd()
    if self.ramdiskId is not None:
      oprot.writeFieldBegin('ramdiskId', TType.STRING, 8)
      oprot.writeString(self.ramdiskId)
      oprot.writeFieldEnd()
    if self.isPublic is not None:
      oprot.writeFieldBegin('isPublic', TType.I64, 9)
      oprot.writeI64(self.isPublic)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 10)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 11)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.imageCategory is not None:
      oprot.writeFieldBegin('imageCategory', TType.I64, 12)
      oprot.writeI64(self.imageCategory)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 13)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.STRING, 14)
      oprot.writeString(self.platform)
      oprot.writeFieldEnd()
    if self.ownerName is not None:
      oprot.writeFieldBegin('ownerName', TType.STRING, 15)
      oprot.writeString(self.ownerName)
      oprot.writeFieldEnd()
    if self.vmStyle is not None:
      oprot.writeFieldBegin('vmStyle', TType.STRING, 16)
      oprot.writeString(self.vmStyle)
      oprot.writeFieldEnd()
    if self.Groups is not None:
      oprot.writeFieldBegin('Groups', TType.STRING, 17)
      oprot.writeString(self.Groups)
      oprot.writeFieldEnd()
    if self.OS is not None:
      oprot.writeFieldBegin('OS', TType.STRING, 18)
      oprot.writeString(self.OS)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.STRING, 19)
      oprot.writeString(self.createTime)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I64, 20)
      oprot.writeI64(self.size)
      oprot.writeFieldEnd()
    if self.manifest is not None:
      oprot.writeFieldBegin('manifest', TType.STRING, 21)
      oprot.writeString(self.manifest)
      oprot.writeFieldEnd()
    if self.HYPERVISOR is not None:
      oprot.writeFieldBegin('HYPERVISOR', TType.STRING, 22)
      oprot.writeString(self.HYPERVISOR)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_UserInfo:
  """
  Attributes:
   - userName
   - email
   - realName
   - reservationId
   - bCryptedPassword
   - telephoneNumber
   - affiliation
   - projectDescription
   - projectPIName
   - confirmationCode
   - certificateCode
   - isApproved
   - isConfirmed
   - isEnabled
   - isAdministrator
   - passwordExpires
   - temporaryPassword
   - isPrivateImgCreated
   - popedom
   - sLogonName
   - sSeriesName
   - seriesID
   - domain
   - maxPrivateInstances
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userName', None, None, ), # 1
    (2, TType.STRING, 'email', None, None, ), # 2
    (3, TType.STRING, 'realName', None, None, ), # 3
    (4, TType.I64, 'reservationId', None, None, ), # 4
    (5, TType.STRING, 'bCryptedPassword', None, None, ), # 5
    (6, TType.STRING, 'telephoneNumber', None, None, ), # 6
    (7, TType.STRING, 'affiliation', None, None, ), # 7
    (8, TType.STRING, 'projectDescription', None, None, ), # 8
    (9, TType.STRING, 'projectPIName', None, None, ), # 9
    (10, TType.STRING, 'confirmationCode', None, None, ), # 10
    (11, TType.STRING, 'certificateCode', None, None, ), # 11
    (12, TType.BOOL, 'isApproved', None, None, ), # 12
    (13, TType.BOOL, 'isConfirmed', None, None, ), # 13
    (14, TType.BOOL, 'isEnabled', None, None, ), # 14
    (15, TType.BOOL, 'isAdministrator', None, None, ), # 15
    (16, TType.I64, 'passwordExpires', None, None, ), # 16
    (17, TType.STRING, 'temporaryPassword', None, None, ), # 17
    (18, TType.BOOL, 'isPrivateImgCreated', None, None, ), # 18
    (19, TType.I64, 'popedom', None, None, ), # 19
    (20, TType.STRING, 'sLogonName', None, None, ), # 20
    (21, TType.STRING, 'sSeriesName', None, None, ), # 21
    (22, TType.I64, 'seriesID', None, None, ), # 22
    (23, TType.STRING, 'domain', None, None, ), # 23
    (24, TType.I64, 'maxPrivateInstances', None, None, ), # 24
  )

  def __init__(self, userName=None, email=None, realName=None, reservationId=None, bCryptedPassword=None, telephoneNumber=None, affiliation=None, projectDescription=None, projectPIName=None, confirmationCode=None, certificateCode=None, isApproved=None, isConfirmed=None, isEnabled=None, isAdministrator=None, passwordExpires=None, temporaryPassword=None, isPrivateImgCreated=None, popedom=None, sLogonName=None, sSeriesName=None, seriesID=None, domain=None, maxPrivateInstances=None,):
    self.userName = userName
    self.email = email
    self.realName = realName
    self.reservationId = reservationId
    self.bCryptedPassword = bCryptedPassword
    self.telephoneNumber = telephoneNumber
    self.affiliation = affiliation
    self.projectDescription = projectDescription
    self.projectPIName = projectPIName
    self.confirmationCode = confirmationCode
    self.certificateCode = certificateCode
    self.isApproved = isApproved
    self.isConfirmed = isConfirmed
    self.isEnabled = isEnabled
    self.isAdministrator = isAdministrator
    self.passwordExpires = passwordExpires
    self.temporaryPassword = temporaryPassword
    self.isPrivateImgCreated = isPrivateImgCreated
    self.popedom = popedom
    self.sLogonName = sLogonName
    self.sSeriesName = sSeriesName
    self.seriesID = seriesID
    self.domain = domain
    self.maxPrivateInstances = maxPrivateInstances

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.realName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.reservationId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bCryptedPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.telephoneNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.affiliation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.projectDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.projectPIName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.confirmationCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.certificateCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.isApproved = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.isConfirmed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.isEnabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.isAdministrator = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.passwordExpires = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.temporaryPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.isPrivateImgCreated = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.popedom = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.sLogonName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.sSeriesName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          self.seriesID = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          self.maxPrivateInstances = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_UserInfo')
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 1)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 2)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.realName is not None:
      oprot.writeFieldBegin('realName', TType.STRING, 3)
      oprot.writeString(self.realName)
      oprot.writeFieldEnd()
    if self.reservationId is not None:
      oprot.writeFieldBegin('reservationId', TType.I64, 4)
      oprot.writeI64(self.reservationId)
      oprot.writeFieldEnd()
    if self.bCryptedPassword is not None:
      oprot.writeFieldBegin('bCryptedPassword', TType.STRING, 5)
      oprot.writeString(self.bCryptedPassword)
      oprot.writeFieldEnd()
    if self.telephoneNumber is not None:
      oprot.writeFieldBegin('telephoneNumber', TType.STRING, 6)
      oprot.writeString(self.telephoneNumber)
      oprot.writeFieldEnd()
    if self.affiliation is not None:
      oprot.writeFieldBegin('affiliation', TType.STRING, 7)
      oprot.writeString(self.affiliation)
      oprot.writeFieldEnd()
    if self.projectDescription is not None:
      oprot.writeFieldBegin('projectDescription', TType.STRING, 8)
      oprot.writeString(self.projectDescription)
      oprot.writeFieldEnd()
    if self.projectPIName is not None:
      oprot.writeFieldBegin('projectPIName', TType.STRING, 9)
      oprot.writeString(self.projectPIName)
      oprot.writeFieldEnd()
    if self.confirmationCode is not None:
      oprot.writeFieldBegin('confirmationCode', TType.STRING, 10)
      oprot.writeString(self.confirmationCode)
      oprot.writeFieldEnd()
    if self.certificateCode is not None:
      oprot.writeFieldBegin('certificateCode', TType.STRING, 11)
      oprot.writeString(self.certificateCode)
      oprot.writeFieldEnd()
    if self.isApproved is not None:
      oprot.writeFieldBegin('isApproved', TType.BOOL, 12)
      oprot.writeBool(self.isApproved)
      oprot.writeFieldEnd()
    if self.isConfirmed is not None:
      oprot.writeFieldBegin('isConfirmed', TType.BOOL, 13)
      oprot.writeBool(self.isConfirmed)
      oprot.writeFieldEnd()
    if self.isEnabled is not None:
      oprot.writeFieldBegin('isEnabled', TType.BOOL, 14)
      oprot.writeBool(self.isEnabled)
      oprot.writeFieldEnd()
    if self.isAdministrator is not None:
      oprot.writeFieldBegin('isAdministrator', TType.BOOL, 15)
      oprot.writeBool(self.isAdministrator)
      oprot.writeFieldEnd()
    if self.passwordExpires is not None:
      oprot.writeFieldBegin('passwordExpires', TType.I64, 16)
      oprot.writeI64(self.passwordExpires)
      oprot.writeFieldEnd()
    if self.temporaryPassword is not None:
      oprot.writeFieldBegin('temporaryPassword', TType.STRING, 17)
      oprot.writeString(self.temporaryPassword)
      oprot.writeFieldEnd()
    if self.isPrivateImgCreated is not None:
      oprot.writeFieldBegin('isPrivateImgCreated', TType.BOOL, 18)
      oprot.writeBool(self.isPrivateImgCreated)
      oprot.writeFieldEnd()
    if self.popedom is not None:
      oprot.writeFieldBegin('popedom', TType.I64, 19)
      oprot.writeI64(self.popedom)
      oprot.writeFieldEnd()
    if self.sLogonName is not None:
      oprot.writeFieldBegin('sLogonName', TType.STRING, 20)
      oprot.writeString(self.sLogonName)
      oprot.writeFieldEnd()
    if self.sSeriesName is not None:
      oprot.writeFieldBegin('sSeriesName', TType.STRING, 21)
      oprot.writeString(self.sSeriesName)
      oprot.writeFieldEnd()
    if self.seriesID is not None:
      oprot.writeFieldBegin('seriesID', TType.I64, 22)
      oprot.writeI64(self.seriesID)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 23)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.maxPrivateInstances is not None:
      oprot.writeFieldBegin('maxPrivateInstances', TType.I64, 24)
      oprot.writeI64(self.maxPrivateInstances)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_eucaTransaction:
  """
  Attributes:
   - transactionID
   - imageID
   - state
   - instanceID
   - instancePort
   - instancePassword
   - downloadProgress
   - imageSize
   - user
   - nodeIp
   - modifyTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'transactionID', None, None, ), # 1
    (2, TType.STRING, 'imageID', None, None, ), # 2
    (3, TType.I32, 'state', None, None, ), # 3
    (4, TType.STRING, 'instanceID', None, None, ), # 4
    (5, TType.I64, 'instancePort', None, None, ), # 5
    (6, TType.STRING, 'instancePassword', None, None, ), # 6
    (7, TType.I64, 'downloadProgress', None, None, ), # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.I64, 'imageSize', None, None, ), # 11
    None, # 12
    None, # 13
    (14, TType.STRING, 'user', None, None, ), # 14
    (15, TType.STRING, 'nodeIp', None, None, ), # 15
    (16, TType.STRING, 'modifyTime', None, None, ), # 16
  )

  def __init__(self, transactionID=None, imageID=None, state=None, instanceID=None, instancePort=None, instancePassword=None, downloadProgress=None, imageSize=None, user=None, nodeIp=None, modifyTime=None,):
    self.transactionID = transactionID
    self.imageID = imageID
    self.state = state
    self.instanceID = instanceID
    self.instancePort = instancePort
    self.instancePassword = instancePassword
    self.downloadProgress = downloadProgress
    self.imageSize = imageSize
    self.user = user
    self.nodeIp = nodeIp
    self.modifyTime = modifyTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.transactionID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.imageID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.instanceID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.instancePort = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.instancePassword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.downloadProgress = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.imageSize = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.nodeIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.modifyTime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_eucaTransaction')
    if self.transactionID is not None:
      oprot.writeFieldBegin('transactionID', TType.STRING, 1)
      oprot.writeString(self.transactionID)
      oprot.writeFieldEnd()
    if self.imageID is not None:
      oprot.writeFieldBegin('imageID', TType.STRING, 2)
      oprot.writeString(self.imageID)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 3)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.instanceID is not None:
      oprot.writeFieldBegin('instanceID', TType.STRING, 4)
      oprot.writeString(self.instanceID)
      oprot.writeFieldEnd()
    if self.instancePort is not None:
      oprot.writeFieldBegin('instancePort', TType.I64, 5)
      oprot.writeI64(self.instancePort)
      oprot.writeFieldEnd()
    if self.instancePassword is not None:
      oprot.writeFieldBegin('instancePassword', TType.STRING, 6)
      oprot.writeString(self.instancePassword)
      oprot.writeFieldEnd()
    if self.downloadProgress is not None:
      oprot.writeFieldBegin('downloadProgress', TType.I64, 7)
      oprot.writeI64(self.downloadProgress)
      oprot.writeFieldEnd()
    if self.imageSize is not None:
      oprot.writeFieldBegin('imageSize', TType.I64, 11)
      oprot.writeI64(self.imageSize)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 14)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.nodeIp is not None:
      oprot.writeFieldBegin('nodeIp', TType.STRING, 15)
      oprot.writeString(self.nodeIp)
      oprot.writeFieldEnd()
    if self.modifyTime is not None:
      oprot.writeFieldBegin('modifyTime', TType.STRING, 16)
      oprot.writeString(self.modifyTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_transmit_data:
  """
  Attributes:
   - node_ip
   - transactions
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'node_ip', None, None, ), # 1
    (2, TType.LIST, 'transactions', (TType.STRUCT,(thd_eucaTransaction, thd_eucaTransaction.thrift_spec)), None, ), # 2
  )

  def __init__(self, node_ip=None, transactions=None,):
    self.node_ip = node_ip
    self.transactions = transactions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.node_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.transactions = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = thd_eucaTransaction()
            _elem12.read(iprot)
            self.transactions.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_transmit_data')
    if self.node_ip is not None:
      oprot.writeFieldBegin('node_ip', TType.STRING, 1)
      oprot.writeString(self.node_ip)
      oprot.writeFieldEnd()
    if self.transactions is not None:
      oprot.writeFieldBegin('transactions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.transactions))
      for iter13 in self.transactions:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_migrateInfo:
  """
  Attributes:
   - transactionID
   - sourceIP
   - targetIP
   - publicIp
   - machinename
   - user
   - imageId
   - isMigrated
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'transactionID', None, None, ), # 1
    (2, TType.STRING, 'sourceIP', None, None, ), # 2
    (3, TType.STRING, 'targetIP', None, None, ), # 3
    (4, TType.STRING, 'publicIp', None, None, ), # 4
    (5, TType.STRING, 'machinename', None, None, ), # 5
    (6, TType.STRING, 'user', None, None, ), # 6
    (7, TType.STRING, 'imageId', None, None, ), # 7
    (8, TType.BOOL, 'isMigrated', None, None, ), # 8
  )

  def __init__(self, transactionID=None, sourceIP=None, targetIP=None, publicIp=None, machinename=None, user=None, imageId=None, isMigrated=None,):
    self.transactionID = transactionID
    self.sourceIP = sourceIP
    self.targetIP = targetIP
    self.publicIp = publicIp
    self.machinename = machinename
    self.user = user
    self.imageId = imageId
    self.isMigrated = isMigrated

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.transactionID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sourceIP = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetIP = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.publicIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.machinename = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.imageId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.isMigrated = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_migrateInfo')
    if self.transactionID is not None:
      oprot.writeFieldBegin('transactionID', TType.STRING, 1)
      oprot.writeString(self.transactionID)
      oprot.writeFieldEnd()
    if self.sourceIP is not None:
      oprot.writeFieldBegin('sourceIP', TType.STRING, 2)
      oprot.writeString(self.sourceIP)
      oprot.writeFieldEnd()
    if self.targetIP is not None:
      oprot.writeFieldBegin('targetIP', TType.STRING, 3)
      oprot.writeString(self.targetIP)
      oprot.writeFieldEnd()
    if self.publicIp is not None:
      oprot.writeFieldBegin('publicIp', TType.STRING, 4)
      oprot.writeString(self.publicIp)
      oprot.writeFieldEnd()
    if self.machinename is not None:
      oprot.writeFieldBegin('machinename', TType.STRING, 5)
      oprot.writeString(self.machinename)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 6)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.imageId is not None:
      oprot.writeFieldBegin('imageId', TType.STRING, 7)
      oprot.writeString(self.imageId)
      oprot.writeFieldEnd()
    if self.isMigrated is not None:
      oprot.writeFieldBegin('isMigrated', TType.BOOL, 8)
      oprot.writeBool(self.isMigrated)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_nodeMigrateInfo:
  """
  Attributes:
   - id
   - sourceIP
   - targetIP
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'sourceIP', None, None, ), # 2
    (3, TType.STRING, 'targetIP', None, None, ), # 3
  )

  def __init__(self, id=None, sourceIP=None, targetIP=None,):
    self.id = id
    self.sourceIP = sourceIP
    self.targetIP = targetIP

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sourceIP = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetIP = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_nodeMigrateInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.sourceIP is not None:
      oprot.writeFieldBegin('sourceIP', TType.STRING, 2)
      oprot.writeString(self.sourceIP)
      oprot.writeFieldEnd()
    if self.targetIP is not None:
      oprot.writeFieldBegin('targetIP', TType.STRING, 3)
      oprot.writeString(self.targetIP)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class thd_snapshot:
  """
  Attributes:
   - imageID
   - userName
   - snapshotName
   - description
   - id
   - snapshotTag
   - vmSize
   - snapshotDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'imageID', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'snapshotName', None, None, ), # 3
    (4, TType.STRING, 'description', None, None, ), # 4
    (5, TType.I64, 'id', None, None, ), # 5
    (6, TType.STRING, 'snapshotTag', None, None, ), # 6
    (7, TType.I64, 'vmSize', None, None, ), # 7
    (8, TType.STRING, 'snapshotDate', None, None, ), # 8
  )

  def __init__(self, imageID=None, userName=None, snapshotName=None, description=None, id=None, snapshotTag=None, vmSize=None, snapshotDate=None,):
    self.imageID = imageID
    self.userName = userName
    self.snapshotName = snapshotName
    self.description = description
    self.id = id
    self.snapshotTag = snapshotTag
    self.vmSize = vmSize
    self.snapshotDate = snapshotDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.imageID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.snapshotName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.snapshotTag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.vmSize = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.snapshotDate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('thd_snapshot')
    if self.imageID is not None:
      oprot.writeFieldBegin('imageID', TType.STRING, 1)
      oprot.writeString(self.imageID)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.snapshotName is not None:
      oprot.writeFieldBegin('snapshotName', TType.STRING, 3)
      oprot.writeString(self.snapshotName)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 4)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 5)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.snapshotTag is not None:
      oprot.writeFieldBegin('snapshotTag', TType.STRING, 6)
      oprot.writeString(self.snapshotTag)
      oprot.writeFieldEnd()
    if self.vmSize is not None:
      oprot.writeFieldBegin('vmSize', TType.I64, 7)
      oprot.writeI64(self.vmSize)
      oprot.writeFieldEnd()
    if self.snapshotDate is not None:
      oprot.writeFieldBegin('snapshotDate', TType.STRING, 8)
      oprot.writeString(self.snapshotDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
